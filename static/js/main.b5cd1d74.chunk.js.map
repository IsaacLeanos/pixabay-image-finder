{"version":3,"sources":["component/navbar/NavBar.js","component/image-result/ImageResults.js","component/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImage","handleOpen","img","_this","setState","handleOnClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","value","target","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","console","log","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_result_ImageResults","React","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b5cd1d74.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from 'material-ui/AppBar';\r\n\r\nconst NavBar=()=><AppBar title='Pixabay Image Finder'/>\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport{GridList,GridTile}from'material-ui/GridList';\r\nimport IconButton from'material-ui/IconButton';\r\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in';\r\nimport Dialog from 'material-ui/Dialog';\r\nimport FlatButton from 'material-ui/FlatButton';\r\n\r\nclass ImageResults extends Component {\r\n  state={\r\n      open:false,\r\n      currentImage:''\r\n  }\r\n\r\n  handleOpen=img=>{\r\n      this.setState({open:true,currentImage:img})\r\n  }\r\n\r\n  handleOnClose=()=>{\r\n      this.setState({open:false})\r\n  }\r\n\r\n  render() {\r\n    let imageListContent;\r\n    const{images}=this.props;\r\n    \r\n    if(images){\r\n        imageListContent=(\r\n            <GridList cols={3}>\r\n            {images.map(img=>(\r\n                <GridTile \r\n                    title={img.tags}\r\n                    key={img.id}\r\n                    subtitle={<span>by <strong>{img.user}</strong></span>}\r\n                    actionIcon={\r\n                        <IconButton\r\n                            onClick={()=>this.handleOpen(img.largeImageURL)}\r\n                        >\r\n                        <ZoomIn color='white'/>\r\n                        </IconButton>}\r\n                >\r\n                <img \r\n                    src={img.largeImageURL}\r\n                    alt=''\r\n                    />\r\n                </GridTile>\r\n            ))}\r\n            </GridList>\r\n        )\r\n    }else{\r\n        imageListContent=null;\r\n    }\r\n\r\n    const actions=[\r\n        <FlatButton label='Close' primary={true} onClick={this.handleOnClose}/>\r\n    ]\r\n\r\n    return (\r\n      <div>\r\n        {imageListContent}\r\n        <Dialog\r\n            actions={actions}\r\n            modal={false}\r\n            open={this.state.open}\r\n            onRequestClose={this.handleOnClose}\r\n        >\r\n        <img src={this.state.currentImage} alt='' style={{width:'100%'}}/>\r\n        </Dialog>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nImageResults.propTypes={\r\n    images:PropTypes.array.isRequired\r\n}\r\n\r\nexport default ImageResults;","import React from 'react';\r\nimport TextField from 'material-ui/TextField';\r\nimport SelectField from 'material-ui/SelectField';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport axios from 'axios';\r\nimport ImageResults from '../image-result/ImageResults';\r\n\r\nclass Search extends React.Component {\r\n\r\n    state={\r\n        searchText:'',\r\n        amount:15,\r\n        apiUrl:'https://pixabay.com/api',\r\n        apiKey:'',\r\n        images:[]\r\n    };\r\n\r\n    onTextChange=(e)=>{\r\n        const value=e.target.value;\r\n        this.setState({[e.target.name]:value},()=>{\r\n            if(value===''){\r\n                this.setState({images:[]});\r\n            }else{\r\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo\r\n                &per_page=${this.state.amount}&safesearch=true`)\r\n                .then(res=>this.setState({images:res.data.hits}))\r\n                .catch(e=>console.log('error',e));\r\n            }\r\n        });\r\n    };\r\n\r\n    onAmountChange=(e,index,value)=>this.setState({amount:value});\r\n\r\n  render() {\r\n    console.log(this.state.images)  \r\n    return (\r\n      <div>\r\n\r\n        <TextField       \r\n            name='searchText'\r\n            value={this.state.searchText} \r\n            onChange={this.onTextChange}\r\n            floatingLabelText='Search for images..'\r\n            fullWidth={true}\r\n        />\r\n        <br/>\r\n\r\n        <SelectField     \r\n            name='amount'\r\n            floatingLabelText='Amount'\r\n            value={this.state.amount}\r\n            onChange={this.onAmountChange}\r\n        >\r\n            <MenuItem value={5} primaryText={5}/>\r\n            <MenuItem value={10} primaryText={10}/>\r\n            <MenuItem value={15} primaryText={15}/>\r\n            <MenuItem value={30} primaryText={30}/>\r\n            <MenuItem value={50} primaryText={50}/>\r\n        </SelectField>\r\n          <br/>\r\n\r\n          {this.state.images.length>0?<ImageResults images={this.state.images}/>:null}\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport NavBar from './component/navbar/NavBar';\nimport Search from './component/search/Search';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n\n      <div>\n      <NavBar/>\n      <Search/>\n      </div>\n\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}